-- 1. Database Exploation 

-- Checking all the tables in the database 
SELECT * FROM INFORMATION_SCHEMA.TABLES;

-- Checking all the columns 
SELECT * FROM INFORMATION_SCHEMA.COLUMNS;

-- checking one column in gold schema 
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_products'

-- 2. DIMENSION EXPLORATION 
-- Explore all countries our customers come from 
SELECT DISTINCT (country) FROM gold.dim_customers;

-- All categories -> Major Categories 
SELECT category, subcategory, product_name FROM gold.dim_products;


-- DATE EXPLOARTION 
-- Find the date of the first order & last order, how many months of data is available  
SELECT 
	MIN(order_date) AS last_order_date,
	MAX(order_date) AS recent_order_date,
	DATEDIFF(Month, MIN(order_date), MAX(order_date)) AS duration_month
FROM gold.fact_sales


-- Find the youngest and oldest customers from the data set 
SELECT
	MIN(birthdate) AS oldest_customer,
	DATEDIFF(YEAR, MIN(birthdate), GETDATE()) As oldest_customer_age,
	MAX(birthdate) AS youngest_customer,
	DATEDIFF(YEAR, MAX(birthdate), GETDATE()) AS youngest_customer_age
FROM gold.dim_customers



-- 4. Measures Explorations 
-- Find the total sales 
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales

-- Find how many items are sold
SELECT SUM(quantity) AS total_quantity FROM gold.fact_sales

-- Find the average selling prices 
SELECT AVG(price) AS avg_price FROM gold.fact_sales


-- Find the Total number of orders
SELECT COUNT(DISTINCT order_number) As order_num2 FROM gold.fact_sales;

-- Find the total number of products
SELECT COUNT(DISTINCT product_id) AS product_num FROM gold.dim_products;

-- Find the total number of customers 
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers;

-- Find the total number of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.fact_sales;



-- Generate a Report that shows all key metrics of the business 

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales
UNION ALL 
SELECT 'Total Num Orders', COUNT(DISTINCT order_number) As order_num2 FROM gold.fact_sales
UNION ALL
SELECT 'Total Num Products', COUNT(DISTINCT product_id) AS product_num FROM gold.dim_products
UNION ALL
SELECT 'Total Num Customers', COUNT(customer_key) AS total_customers FROM gold.dim_customers;

 

 -- Find total customers by countries
SELECT
	country,
	COUNT(customer_id) As total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

 -- Find total customers by gender
 SELECT
	gender,
	COUNT(customer_key) customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY customers DESC


 -- Find total products by category
 SELECT 
	 category,
	 COUNT(product_id) AS total_product
 FROM gold.dim_products
 GROUP BY category
 ORDER BY total_product DESC


 -- what is the average costs in each category?
 SELECT 
	 category,
	 AVG(cost) AS average_cost
 FROM gold.dim_products
 GROUP BY category
 ORDER BY average_cost DESC


 -- what is the total revenue generated by each category
 SELECT 
	 p.category,
	 SUM(s.sales_amount) AS total_sales
 FROM gold.fact_sales s
 LEFT JOIN gold.dim_products p
 ON s.product_key = p.product_key
 GROUP BY p.category 
 ORDER BY total_sales DESC


 -- Find total revenue is generated by each customers
 SELECT 
	c.customer_key,
	TRIM(CONCAT_WS(' ',c.first_name, c.last_name)) AS customer_name,
	 SUM(s.sales_amount) as total_revenue
 FROM gold.fact_sales s
 LEFT JOIN gold.dim_customers c
 ON c.customer_key = s.customer_key 
 GROUP BY CONCAT_WS(' ',c.first_name, c.last_name),c.customer_key
 ORDER BY total_revenue DESC


 -- what is the distribution of sold items across countries?
SELECT 
	c.country,
	COUNT(f.quantity) as total_quantity
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_quantity DESC

-- which 5 products generate the highest revenue?
SELECT TOP 5
	p.product_key,
	p.product_name,
	SUM(sales_amount) as total_sales 
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name,p.product_key
ORDER BY total_sales DESC 




SELECT
*
FROM(
SELECT 
	p.product_key,
	p.product_name,
	SUM(sales_amount) as total_sales,
	ROW_NUMBER() OVER(ORDER BY SUM(sales_amount) DESC) AS row_num
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name,p.product_key)t
WHERE row_num <=5


-- what are the 5 worst-performing products in terms of sales?
SELECT TOP 5
	p.product_key,
	p.product_name,
	SUM(sales_amount) as total_sales 
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name,p.product_key
ORDER BY total_sales 


-- Find tthe Top - 10 customers who have generated the highest revenue And 3 customers with the fewest order placed 

SELECT TOP 10
	p.product_key,
	p.product_name,
	SUM(sales_amount) as total_sales 
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name,p.product_key
ORDER BY total_sales DESC 


--  3 customers with the fewest order placed 
SELECT TOP 3
	c.customer_key,
	TRIM(CONCAT_WS(' ',c.first_name, c.last_name)) AS customer_name,
	 COUNT(DISTINCT order_number) as order_num
 FROM gold.fact_sales s
 LEFT JOIN gold.dim_customers c
 ON c.customer_key = s.customer_key 
 GROUP BY CONCAT_WS(' ',c.first_name, c.last_name),c.customer_key
 ORDER BY order_num 
 


 -- changes Over time 
 -- Analyze Sales Performance Over Time
 SELECT 
 YEAR(order_date) order_year,
 SUM(sales_amount) AS total_sales,
 COUNT(DISTINCT customer_key) AS total_customers,
 SUM(quantity) AS total_quantity
 FROM gold.fact_sales
 WHERE order_date IS NOT NULL
 GROUP BY YEAR(order_date)
 ORDER BY YEAR(order_date)

 SELECT 
 MONTH(order_date) order_month,
 SUM(sales_amount) AS total_sales,
 COUNT(DISTINCT customer_key) AS total_customers,
 SUM(quantity) AS total_quantity
 FROM gold.fact_sales
 WHERE order_date IS NOT NULL
 GROUP BY MONTH(order_date)
 ORDER BY MONTH(order_date) DESC

 SELECT 
 DATETRUNC(YEAR,order_date) order_date,
 SUM(sales_amount) AS total_sales,
 COUNT(DISTINCT customer_key) AS total_customers,
 SUM(quantity) AS total_quantity
 FROM gold.fact_sales
 WHERE order_date IS NOT NULL
 GROUP BY DATETRUNC(YEAR,order_date) 
 ORDER BY DATETRUNC(YEAR, order_date)

 SELECT 
 FORMAT(order_date, 'yyyy-MMM') as order_date,
 SUM(sales_amount) AS total_sales ,
 COUNT(DISTINCT customer_key) AS total_customers,
 SUM(quantity) AS total_quantity
 FROM gold.fact_sales
 WHERE order_date IS NOT NULL
 GROUP BY FORMAT(order_date, 'yyyy-MMM') 
 ORDER BY FORMAT(order_date, 'yyyy-MMM')


 -- Cumulative analysis 

 -- Calculate the total sales per month 
 -- and the running total of sales over time 

 SELECT 
 order_month,
 total_amount,
 SUM(total_amount) OVER(PARTITION BY order_month ORDER BY order_month) AS running_sales,
 AVG(avg_price) OVER(PARTITION BY order_month ORDER BY order_month) AS running_average_price
 FROM (
 SELECT 
	 DATETRUNC(month,order_date) AS order_month,
	 SUM(sales_amount) AS total_amount,
	 AVG(price) AS avg_price
 FROM gold.fact_sales
 WHERE order_date IS NOT NULL
 GROUP BY DATETRUNC(month, order_date))t


 -- Perfomance Analysis 
-- Analyze the yearly performnace of products by comparing 
-- each product's sales to both its average sales performance and previous year's sales 



WITH yearly_product_sales AS(
SELECT 
	YEAR(f.order_date) AS order_year,
	p.product_name,
	SUM(f.sales_amount) AS total_amount
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
WHERE order_date IS NOT NULL
GROUP BY 
YEAR(f.order_date),
p.product_name)

SELECT 
order_year,
product_name,
total_amount,
AVG(total_amount) OVER(PARTITION BY product_name) AS avg_sales,
total_amount - AVG(total_amount) OVER(PARTITION BY product_name) AS diff_avg,
CASE WHEN total_amount - AVG(total_amount) OVER(PARTITION BY product_name) > 0 THEN 'Above Avg'
	 WHEN total_amount - AVG(total_amount) OVER(PARTITION BY product_name) <0 THEN 'Below Avg'
	 ELSE 'Avg'
END avg_change,
LAG(total_amount) OVER(PARTITION BY product_name ORDER BY order_year) AS py_sales,
total_amount - LAG(total_amount) OVER(PARTITION BY product_name ORDER BY order_year) AS diff_py_sales,
CASE WHEN LAG(total_amount) OVER(PARTITION BY product_name ORDER BY order_year) > 0 THEN 'Increasing'
	 WHEN LAG(total_amount) OVER(PARTITION BY product_name ORDER BY order_year) < 0 THEN 'Decreasing'
	 ELSE 'No Change'
END py_change
FROM yearly_product_sales
ORDER BY product_name, order_year 

-- Which categories contribute the most to overall sales 
WITH category_sales AS(
SELECT 
category,
SUM(sales_amount) as total_sales
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p 
ON s.product_key = p.product_key
GROUP BY category ) 

SELECT
category,
total_sales,
SUM(total_sales) OVER() overall_sales,
CONCAT(ROUND((CAST(total_sales AS FLOAT)/SUM(total_sales) OVER())* 100,2), '%') percentage_of_total
FROM category_sales
ORDER BY percentage_of_total DESC

